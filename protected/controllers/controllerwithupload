<?php

class SiteController extends Controller {

    /**
     * Declares class-based actions.
     */
    public function actions() {
        return array(
            // captcha action renders the CAPTCHA image displayed on the contact page
            'captcha' => array(
                'class' => 'CCaptchaAction',
                'backColor' => 0xFFFFFF,
            ),
            // page action renders "static" pages stored under 'protected/views/site/pages'
            // They can be accessed via: index.php?r=site/page&view=FileName
            'page' => array(
                'class' => 'CViewAction',
            ),
            
        );
    }

    /**
     * This is the default 'index' action that is invoked
     * when an action is not explicitly requested by users.
     */
    public function actionIndex() {
        // renders the view file 'protected/views/site/index.php'
        // using the default layout 'protected/views/layouts/main.php'
        $products = Products::model()->with('productsMany')->findAll();
        $dealers = Dealers::model()->findAll(array('condition'=>'active=1 AND role=1'));
        $basket = Yii::app()->session['basket'];
        $count = array();
        $count_dealers = array();
        $products_count;
            foreach($products as $myProducts){
                $products_count = Categories::model()->with('products')->findByPk($myProducts->category_id,array('condition'=>'active=1'));
                array_push($count, $products_count->products);
            }
            foreach($dealers as $myDealers){
                $dealers_products_count = Dealers::model()->with('dealersStats')->findByPk($myDealers->id);
                array_push($count_dealers, $dealers_products_count->dealersStats); 
            }
            $categories = Categories::model()->findAll();;
        $this->render('index', array('products' => $products, 'dealers' => $dealers, 'count'=>$count,'count_dealers'=>$count_dealers, 'categories'=>$categories));
        //$this->render('index');
    }
    
    public function actionContent($id)
	{
		$view = 'index-2col';
		$model=new Pages;
		$criteria=new CDbCriteria;
		$criteria->condition='active = 1 AND id = '.$id;
		$criteria->order='created_date ASC';

		$data = Pages::model()->find($criteria);
		$this->render($view,array(
			'model' => $model,
			
			'data' => $data,
		));
	}

    /**
     * This is the action to handle external exceptions.
     */
    public function actionError() {
        if ($error = Yii::app()->errorHandler->error) {
            if (Yii::app()->request->isAjaxRequest)
                echo $error['message'];
            else
                $this->render('error', $error);
        }
    }

    /**
     * Displays the contact page
     */
    public function actionContact() {
        $model = new ContactForm;
        if (isset($_POST['ContactForm'])) {
            $model->attributes = $_POST['ContactForm'];
            if ($model->validate()) {
                $name = '=?UTF-8?B?' . base64_encode($model->name) . '?=';
                $subject = '=?UTF-8?B?' . base64_encode($model->category) . '?=';
                $headers = "From: $name <{$model->email}>\r\n" .
                        "Reply-To: {$model->email}\r\n" .
                        "MIME-Version: 1.0\r\n" .
                        "Content-type: text/plain; charset=UTF-8";

                mail(Yii::app()->params['adminEmail'], $subject, $model->body, $headers);
                Yii::app()->user->setFlash('contact', 'Thank you for contacting us. We will respond to you as soon as possible.');
                $this->refresh();
            }
        }
        $this->render('contact', array('model' => $model));
    }

    /**
     * Displays the login page
     */
    public function actionLogin() {
        $model = new LoginForm;

        // if it is ajax validation request
        if (isset($_POST['ajax']) && $_POST['ajax'] === 'login-form') {
            echo CActiveForm::validate($model);
            Yii::app()->end();
        }
        
        // collect user input data
        if (isset($_POST['LoginForm'])) {
            $model->attributes = $_POST['LoginForm'];
            //print_r($model->attributes);exit;
            // validate user input and redirect to the previous page if valid
            if ($model->validate() && $model->login())
                $this->redirect(Yii::app()->user->returnUrl);
        }
        // display the login form
        $this->render('login', array('model' => $model));
    }

    public function actionRegister3() {
        $model = new LoginForm;
        // if it is ajax validation request
        if (isset($_POST['ajax']) && $_POST['ajax'] === 'login-form') {
            echo CActiveForm::validate($model);
            Yii::app()->end();
        }
        
        // collect user input data
        if (isset($_POST['LoginForm'])) {
            $model->attributes = $_POST['LoginForm'];
            // validate user input and redirect to the previous page if valid
            if ($model->validate() && $model->login())
                $this->redirect(Yii::app()->user->returnUrl);
        }
        // display the login form
        $this->render('register', array('model' => $model));
    }

    public function actionUser() {
        //$products = Products::model()->findAll();
        $user = User::model()->findAll();
        $this->render('user', array('user' => $users));
    }

    public function actionUpdateUser() {
        $model = new User;
        if (!empty($_POST)) {
            if ($update = User::model()->findByPk($_POST['id'])) {

                $attributes = $update->attributes = $_POST;

                if (User::model()->updateByPk($_POST['id'], $update->attributes)) {
                    /* echo 'updated';
                      exit; */
                    $this->redirect('index.php?r=site/viewUser&id=' . $_POST['id']);
                }
            }
        } else {
            $id = $_GET['id'];
            $userArray = User::model()->find('id=:id', array(':id' => $id));
            $this->render('updateUser', array('model' => $model,
                'userArray' => $userArray,
            ));
        }
    }

    public function actionDealers() {
        //$products = Products::model()->findAll();
        $dealers = Dealers::model()->findAll(array('condition'=>'active=1 AND role=1'));
        $count_dealers = array();
        foreach($dealers as $myDealers){
            $dealers_products_count = Dealers::model()->with('dealersStats')->findByPk($myDealers->id);
            array_push($count_dealers, $dealers_products_count->dealersStats); 

        }
        $this->render('dealers', array('dealers' => $dealers,'count_dealers'=>$count_dealers));
    }

    public function actionViewDealer($id) {
        $CriteriaProduct = new CDbCriteria();
        $CriteriaProduct->condition = "dealers_id = $id";
        $data = Dealers::model()->findByPk($id);
        $city = Cities::model()->findByPk($data->cities_id);
        $ratings = DealerRatings::model()->findAll(array("condition"=>"dealers_id = $id"));
        $total_ratings = 0;
        $count_ratings = 0;
        $count_dealers = 0;
        $voted = false;
        foreach($ratings as $ratingsitem){
            $count_ratings += $ratingsitem->rating;
            if( Yii::app()->user->id === $ratingsitem->users_id){
               $voted = true; 
            }
        }
        if($ratings == null){
            $total_ratings = 0;
            $count_dealers = 0;
            
        }else{
            $count_dealers = count($ratings);
            $total_ratings = $count_ratings /$count_dealers ;
        }
        $products = Products::model()->findAll( $CriteriaProduct);
        $this->render('viewDealer', array('data' => $data, 'city'=>$city, 'products'=>$products,'total_ratings'=>$total_ratings,'voted'=>$voted,'count_dealers'=>$count_dealers,
        ));
    }

    public function actionRegister() {

        $model = new Dealers;
        $model->date_added = date("Y-m-d H:i:s");
        $cities = Cities::model()->findAll(array('order' => 'city_name ASC'));
        $citiesArray = CHtml::listData($cities, 'id', 'city_name');
        $categories = Categories::model()->findAll(array('order' => 'category_name ASC'));
        $categoriesArray = CHtml::listData($categories, 'id', 'category_name');
        $prices = Prices::model()->findAll(array('order' => 'id ASC'));
        $pricesArray = CHtml::listData($prices, 'id', 'allPrices');
        if (!empty($_POST)) {
            
            $emailExist = Dealers::model()->findAll();
            $exist = false;
            foreach($emailExist as $emails){
                if( $_POST['email_address']  == $emails->email_address)
                $exist = true;
            }
            
            if(!$exist){
            $_POST['password_2'] = md5($_POST['password_2']);
            $_POST['active'] = 0;
            $model->password_2 = $_POST['password_2'];
            $model->role = 1;
            $model->attributes = $_POST;
            $uploadedImage = CUploadedFile::getInstance($model, 'profile_image');

            if (is_object($uploadedImage)) {
                $rnd = rand(0,9999);  
                $fileName = "{$rnd}-{$uploadedImage}";  // random number + file name
                $model->profile_image = $fileName;
            } 
            
            if ($model->save()) {
                if(is_object($uploadedImage))
                {
                    $uploadedImage->saveAs(Yii::app()->basePath.'/../images/dealers/'. $model->profile_image);
                }
                 $message="Thank you for registering as on our website. Please click on the confirmation link sent your email to activate your account";
                 $to = $_POST['email_address'];
					$email_message = "Hi ".ucfirst($_POST['dealer_name'])."

This email has been sent from ".Yii::app()->createAbsoluteUrl('site/')."

You have received this email because this email address
was used during registration on our website.
If you did not register on our website, please disregard this
email. You do not need to unsubscribe or take any further action.

------------------------------------------------
Activation Instructions
------------------------------------------------

Thank you for registering.
We require that you 'validate' your registration to ensure that
the email address you entered was correct. This protects against
unwanted spam and malicious abuse.

To activate your account, simply click on the following link:
".
Yii::app()->createAbsoluteUrl('site/activatereg', array('email_address' => $model->email_address, 'id'=>$model->id))."

". sha1(mt_rand(10000, 99999).time().$to) ."
(Some email client users may need to copy and paste the link into your web
browser).

------------------------------------------------
Regards
Peenza
------------------------------------------------
";
					Yii::app()->mailer->Host = 'localhost';
					Yii::app()->mailer->IsSMTP();
					Yii::app()->mailer->From = "info@peenza.com";
					Yii::app()->mailer->FromName = 'Peenza Online: ';
					Yii::app()->mailer->AddReplyTo('info@peenza.com');
					Yii::app()->mailer->AddAddress($to);
					Yii::app()->mailer->Subject = 'Account Activation';
					Yii::app()->mailer->Body = $email_message;
					Yii::app()->mailer->Send();
                  $this->redirect('index.php?r=site/index&register=true');
                 /*$this->render('feedback', array('message' => $message,
            ));*/
            }else{
                $message="You registration was unsuccessful. Please try again";
                 $this->render('feedback', array('message' => $message,));}
            } // EO Checking email
            else{
                $this->redirect('index.php?r=site/register&emailExist=true');
            }
        }else {
            $this->render('register', array('model' => $model,'citiesArray'=>$citiesArray,'categoriesArray'=>$categoriesArray, 'pricesArray'=>$pricesArray
            ));
        }
    }
	##########################################################################################################
	# IMAGE FUNCTIONS																						 #
	# You do not need to alter these functions																 #
	##########################################################################################################
	function resizeImage($image,$width,$height,$scale) {
		list($imagewidth, $imageheight, $imageType) = getimagesize($image);
		$imageType = image_type_to_mime_type($imageType);
		$newImageWidth = ceil($width * $scale);
		$newImageHeight = ceil($height * $scale);
		$newImage = imagecreatetruecolor($newImageWidth,$newImageHeight);
		switch($imageType) {
			case "image/gif":
				$source=imagecreatefromgif($image); 
				break;
		    case "image/pjpeg":
			case "image/jpeg":
			case "image/jpg":
				$source=imagecreatefromjpeg($image); 
				break;
		    case "image/png":
			case "image/x-png":
				$source=imagecreatefrompng($image); 
				break;
	  	}
		imagecopyresampled($newImage,$source,0,0,0,0,$newImageWidth,$newImageHeight,$width,$height);
		
		switch($imageType) {
			case "image/gif":
		  		imagegif($newImage,$image); 
				break;
	      	case "image/pjpeg":
			case "image/jpeg":
			case "image/jpg":
		  		imagejpeg($newImage,$image,90); 
				break;
			case "image/png":
			case "image/x-png":
				imagepng($newImage,$image);  
				break;
	    }
		
		chmod($image, 0777);
		return $image;
	}
	//You do not need to alter these functions
	function resizeThumbnailImage($thumb_image_name, $image, $width, $height, $start_width, $start_height, $scale){
		list($imagewidth, $imageheight, $imageType) = getimagesize($image);
		$imageType = image_type_to_mime_type($imageType);
		
		$newImageWidth = ceil($width * $scale);
		$newImageHeight = ceil($height * $scale);
		$newImage = imagecreatetruecolor($newImageWidth,$newImageHeight);
		switch($imageType) {
			case "image/gif":
				$source=imagecreatefromgif($image); 
				break;
		    case "image/pjpeg":
			case "image/jpeg":
			case "image/jpg":
				$source=imagecreatefromjpeg($image); 
				break;
		    case "image/png":
			case "image/x-png":
				$source=imagecreatefrompng($image); 
				break;
	  	}
		imagecopyresampled($newImage,$source,0,0,$start_width,$start_height,$newImageWidth,$newImageHeight,$width,$height);
		switch($imageType) {
			case "image/gif":
		  		imagegif($newImage,$thumb_image_name); 
				break;
	      	case "image/pjpeg":
			case "image/jpeg":
			case "image/jpg":
		  		imagejpeg($newImage,$thumb_image_name,90); 
				break;
			case "image/png":
			case "image/x-png":
				imagepng($newImage,$thumb_image_name);  
				break;
	    }
		chmod($thumb_image_name, 0777);
		return $thumb_image_name;
	}
	//You do not need to alter these functions
	function getHeight($image) {
		$size = getimagesize($image);
		$height = $size[1];
		return $height;
	}
	//You do not need to alter these functions
	function getWidth($image) {
		$size = getimagesize($image);
		$width = $size[0];
		return $width;
	}
    
    public function actionUserRegister() {
    	
			error_reporting (E_ALL ^ E_NOTICE);
			session_start(); //Do not remove this
			//only assign a new timestamp if the session variable is empty
			if (!isset($_SESSION['random_key']) || strlen($_SESSION['random_key'])==0){
			    $_SESSION['random_key'] = strtotime(date('Y-m-d H:i:s')); //assign the timestamp to the session variable
				$_SESSION['user_file_ext']= "";
			}
			#########################################################################################################
			# CONSTANTS																								#
			# You can alter the options below																		#
			#########################################################################################################
			$upload_dir = "upload_pic"; 				// The directory for the images to be saved in
			$upload_path = $upload_dir."/";				// The path to where the image will be saved
			$large_image_prefix = "resize_"; 			// The prefix name to large image
			$thumb_image_prefix = "thumbnail_";			// The prefix name to the thumb image
			$large_image_name = $large_image_prefix.$_SESSION['random_key'];     // New name of the large image (append the timestamp to the filename)
			$thumb_image_name = $thumb_image_prefix.$_SESSION['random_key'];     // New name of the thumbnail image (append the timestamp to the filename)
			$max_file = "3"; 							// Maximum file size in MB
			$max_width = "500";							// Max width allowed for the large image
			$thumb_width = "100";						// Width of thumbnail image
			$thumb_height = "100";						// Height of thumbnail image
			// Only one of these image types should be allowed for upload
			$allowed_image_types = array('image/pjpeg'=>"jpg",'image/jpeg'=>"jpg",'image/jpg'=>"jpg",'image/png'=>"png",'image/x-png'=>"png",'image/gif'=>"gif");
			$allowed_image_ext = array_unique($allowed_image_types); // do not change this
			$image_ext = "";	// initialise variable, do not change this.
			foreach ($allowed_image_ext as $mime_type => $ext) {
			    $image_ext.= strtoupper($ext)." ";
			}
	    	//Image Locations
			$large_image_location = $upload_path.$large_image_name.$_SESSION['user_file_ext'];
			$thumb_image_location = $upload_path.$thumb_image_name.$_SESSION['user_file_ext'];
			
			
			//Create the upload directory with the right permissions if it doesn't exist
			if(!is_dir($upload_dir)){
				mkdir($upload_dir, 0777);
				chmod($upload_dir, 0777);
			}
		
		//Check to see if any images with the same name already exist
		//$filename = '.\upload_pic\resize_1366714680.png';
		if (file_exists($large_image_location)) {
		    echo "The file $large_image_location exists";
		} else {
		    echo "The file $filename does not exist<br />";
		}
		
		if (file_exists($large_image_location)){
			echo '<img src="'.$large_image_location.'" >'; exit;
			echo $thumb_image_location; exit;
			if(file_exists($thumb_image_location)){
				echo $thumb_image_location; exit;
				$thumb_photo_exists = "<img src=\"".$upload_path.$thumb_image_name.$_SESSION['user_file_ext']."\" alt=\"Thumbnail Image\"/>";
			}else{
				$thumb_photo_exists = "";
			}
		   	$large_photo_exists = "<img src=\"".$upload_path.$large_image_name.$_SESSION['user_file_ext']."\" alt=\"Large Image\"/>";
		} /*else {
		   	$large_photo_exists = "";
			$thumb_photo_exists = "";
		}*/
    	if (!empty($_POST["upload"])) {
			//Get the file information
			$userfile_name = $_FILES['image']['name'];
			$userfile_tmp = $_FILES['image']['tmp_name'];
			$userfile_size = $_FILES['image']['size'];
			$userfile_type = $_FILES['image']['type'];
			$filename = basename($_FILES['image']['name']);
			$file_ext = strtolower(substr($filename, strrpos($filename, '.') + 1));
			
			//Only process if the file is a JPG, PNG or GIF and below the allowed limit
			if((!empty($_FILES["image"])) && ($_FILES['image']['error'] == 0)) {
				
				foreach ($allowed_image_types as $mime_type => $ext) {
					//loop through the specified image types and if they match the extension then break out
					//everything is ok so go and check file size
					if($file_ext==$ext && $userfile_type==$mime_type){
						$error = "";
						break;
					}else{
						$error = "Only <strong>".$image_ext."</strong> images accepted for upload<br />";
					}
				}
				//check if the file size is above the allowed limit
				if ($userfile_size > ($max_file*1048576)) {
					$error.= "Images must be under ".$max_file."MB in size";
				}
				
			}else{
				$error= "Select an image for upload";
			}
			
			//Everything is ok, so we can upload the image.
			if (strlen($error)==0){
				if (isset($_FILES['image']['name'])){
					//this file could now has an unknown file extension (we hope it's one of the ones set above!)
					$large_image_location = $large_image_location.".".$file_ext;
					$thumb_image_location = $thumb_image_location.".".$file_ext;
					
					//put the file ext in the session so we know what file to look for once its uploaded
					$_SESSION['user_file_ext']=".".$file_ext;
					
					move_uploaded_file($userfile_tmp, $large_image_location);
					chmod($large_image_location, 0777);
					
					$width = $this->getWidth($large_image_location);
					$height = $this->getHeight($large_image_location);
					//Scale the image if it is greater than the width set above
					if ($width > $max_width){
						$scale = $max_width/$width;
						$uploaded = $this->resizeImage($large_image_location,$width,$height,$scale);
					}else{
						$scale = 1;
						$uploaded = $this->resizeImage($large_image_location,$width,$height,$scale);
					}
					//Delete the thumbnail file so the user can create a new one
					
					if (file_exists($thumb_image_location)) {
						unlink($thumb_image_location);
					}
				}
				//Refresh the page to show the new uploaded image
				/*header("location:".$_SERVER["PHP_SELF"]);
				exit();*/
			}
		}
		
		if (isset($_POST["upload_thumbnail"]) && strlen($large_photo_exists)>0) {
			//Get the new coordinates to crop the image.
			$x1 = $_POST["x1"];
			$y1 = $_POST["y1"];
			$x2 = $_POST["x2"];
			$y2 = $_POST["y2"];
			$w = $_POST["w"];
			$h = $_POST["h"];
			//Scale the image to the thumb_width set above
			$scale = $thumb_width/$w;
			$cropped = $this->resizeThumbnailImage($thumb_image_location, $large_image_location,$w,$h,$x1,$y1,$scale);
			//Reload the page again to view the thumbnail
			header("location:".$_SERVER["PHP_SELF"]);
			exit();
		}
        //print_r($_POST);exit;
        $model = new User;
        $model->active = "0";
        $model->date_added = date("Y-m-d H:i:s");
        if (isset($_POST['register-value']) && !empty($_POST)) {
            
            $emailExist = Dealers::model()->findAll();
            $exist = false;
            foreach($emailExist as $emails){
                if( $_POST['email_address']  == $emails->email_address)
                $exist = true;
            }
            
            if(!$exist){
            $_POST['password_2'] = md5($_POST['password_2']);
            $model->password_2 = $_POST['password_2'];
            $model->role = 2;
            $model->attributes = $_POST;
            $uploadedImage = CUploadedFile::getInstance($model, 'profile_image');
            if (is_object($uploadedImage)) {
                $rnd = rand(0,9999);  
                $fileName = "{$rnd}-{$uploadedImage}";  // random number + file name
                $model->profile_image = $fileName;
            } 
            
            if ($model->save()) {
                if(is_object($uploadedImage))
                {
                    $uploadedImage->saveAs(Yii::app()->basePath.'/../images/users/'. $model->profile_image);
                }
                 $message="Thank you for registering as on our website. Please click on the confirmation link sent your email to activate your account";
                 $to = $_POST['email_address'];
					$email_message = "Hi ".ucfirst($_POST['username'])."

This email has been sent from ".Yii::app()->createAbsoluteUrl('site/')."

You have received this email because this email address
was used during registration on our website.
If you did not register on our website, please disregard this
email. You do not need to unsubscribe or take any further action.

------------------------------------------------
Activation Instructions
------------------------------------------------

Thank you for registering.
We require that you 'validate' your registration to ensure that
the email address you entered was correct. This protects against
unwanted spam and malicious abuse.

To activate your account, simply click on the following link:
".
Yii::app()->createAbsoluteUrl('site/activatereg', array('email_address' => $model->email_address, 'id'=>$model->id))."

". sha1(mt_rand(10000, 99999).time().$to) ."
(Some email client users may need to copy and paste the link into your web
browser).

------------------------------------------------
Regards
Peenza
------------------------------------------------
";
					Yii::app()->mailer->Host = 'localhost';
					Yii::app()->mailer->IsSMTP();
					Yii::app()->mailer->From = "info@peenza.com";
					Yii::app()->mailer->FromName = 'Peenza Online: ';
					Yii::app()->mailer->AddReplyTo('info@peenza.com');
					Yii::app()->mailer->AddAddress($to);
					Yii::app()->mailer->Subject = 'Account Activation';
					Yii::app()->mailer->Body = $email_message;
					Yii::app()->mailer->Send();
                 $this->redirect('index.php?r=site/index&register=true');
            }else{
                $message="You registration was unsuccessful. Please try again";
                 $this->render('feedback', array('message' => $message,));}
                 
        }else {
            $this->redirect('index.php?r=site/userRegister&emailExist=true');
        } //regiser
        }else {
            $this->render('userRegister', array('model' => $model,'large_photo_exists'=> $large_photo_exists, 'large_image_location'=> $large_image_location,
            'thumb_width'=>$thumb_width, 'thumb_photo_exists'=>$thumb_photo_exists
            ));
        }
    }
    
    public function actionRecommend(){
        if(!empty($_POST)){
                 $to = $_POST['friend_email'];
                 $name_surname = $_POST['name_surname'];
                 $email_message = "Hi, "."

This email has been sent from ".Yii::app()->createAbsoluteUrl('site/')."

You have received this email because this email address
has been recommended by ".$name_surname." on our website.

------------------------------------------------
Regards
Peenza
------------------------------------------------
";
            Yii::app()->mailer->Host = 'localhost';
            Yii::app()->mailer->IsSMTP();
            Yii::app()->mailer->From = "info@peenza.com";
            Yii::app()->mailer->FromName = 'Peenza Online: ';
            Yii::app()->mailer->AddReplyTo('info@peenza.com');
            Yii::app()->mailer->AddAddress($to);
            Yii::app()->mailer->Subject = 'Recommendation';
            Yii::app()->mailer->Body = $email_message;
            if(Yii::app()->mailer->Send()){
                $this->redirect(Yii::app()->user->returnUrl);
            }
        }
    }


    public function actionActivatereg()
        {
            $email_address= Yii::app()->request->getQuery('email_address');       
			$id = $_GET['id'];
			// collect user input data
                            
			if(isset($email_address))
			{
				
			  $model = Dealers::model()->find('email_address=:email_address', array(':email_address'=>$email_address));   
			  if($email_address == $model->email_address)
				{
					$model->active = 1;
					Dealers::model()->updateByPk($id, array('active'=>"1"));
                                        $this->redirect('index.php?r=site/index&success=true');
					/*$this->render('confirmationreg',array('model'=>$model,
					));*/
				}   
				
			}
  
			// display the login form
			
        }

    public function actionUpdateDealer() {
        $model = new Dealers;
        $cities = Cities::model()->findAll(array('order' => 'city_name ASC'));
        $citiesArray = CHtml::listData($cities, 'id', 'city_name');
        $categories = Categories::model()->findAll(array('order' => 'category_name ASC'));
        $categoriesArray = CHtml::listData($categories, 'id', 'category_name');
        /*var_dump($_POST);
        exit;*/
        if (!empty($_POST)) {
            if ($update = Dealers::model()->findByPk($_POST['id'])) {

                $attributes = $update->attributes = $_POST;
                $update->cities_id = $_POST['cities_id'];
                $update->last_updated =  date("Y-m-d H:i:s");;
                $file=CUploadedFile::getInstance($update,'profile_image');
                $rnd = rand(0,9999);
                $fileName = "{$rnd}-{$file}";
                if(!empty($file))
                {
                        $update->profile_image=CUploadedFile::getInstance($update,'profile_image');
                }
                else
                {
                        $update->profile_image = $update->profile_image;
                }
               
                if (Dealers::model()->updateByPk($_POST['id'], $update->attributes)) {
                    
                     if(!empty($file))
                    {	
                        
                            $update->profile_image->saveAs(Yii::app()->basePath.'/../images/dealers/'. $update->profile_image);
                    }
                    $this->redirect('index.php?r=site/viewDealer&id=' . $_POST['id']);
                }
            }
        } else {
            $id = $_GET['id'];
            $dealerArray = Dealers::model()->find('id=:id', array(':id' => $id));
            $this->render('updateDealer', array('model' => $model,
                'dealerArray' => $dealerArray,'citiesArray'=>$citiesArray, 'categoriesArray'=>$categoriesArray 
            ));
        }
    }
    public function actionModus(){
        $this->render('modustest');
    }
    /*public function actionCities(){
        $cities = array('0'=>'Jozi', '1'=>'harare' );
        $this->render('cities', array('cities'=>$cities));
        //$this->redirect('index.php?r=site/viewDealer&id=' . $_POST['id']);
    }*/
    
    public function actionProducts() {
        $count = array();
        if (isset($_GET['catID'])) {
            $products = Products::model()->findAll(array('condition'=>'category_id='.$_GET['catID'].' AND active=1') );
            $categories = Categories::model()->findByPk($_GET['catID']);
        } else {
            $products = Products::model()->findAll(array('condition'=>'active=1'));
            
            foreach($products as $myProducts){
                $products_count = Categories::model()->with('products')->findByPk($myProducts->category_id,array('condition'=>'active=1') );
                array_push($count, $products_count->products);
            }
            $categories = "";
            
        }
        $this->render('products', array('products' => $products, 'categories'=> $categories, 'count'=>$count ));
    }
    public function actionAddToBasket(){
       session_start();
       
        $_SESSION['basket'][] = array('id' => $_POST['id'],
            'product_name' => $_POST['product_name'],
            'price' => $_POST['price'],
            'color' => $_POST['color'],
            'product_year' => $_POST['product_year'],
            'quantity' => $_POST['quantity'],
            'dimensions'=>$_POST['dimensions'],
            'dealer_name' => $_POST['dealer_name'],
            'thumb_image' => $_POST['thumb_image'],
            'conditions'=>$_POST['conditions'],
        );
        $this->redirect('index.php?r=site/viewBasket');
    }
    
    public function actionAddToWishList(){
        $model = new WishList;
        /*die($_POST);*/
        if(!empty($_POST)){
            
            $model->attributes = $_POST;
            $model->date_added =  date("Y-m-d H:i:s");
             if ($model->save()) {
                 $this->redirect('index.php?r=site/viewWishList');
            } 
        }
        $this->redirect('index.php?r=site/viewWishList');
    }
    
    public function actionRemoveItem($id){
        session_start();
        if (isset($_GET)) {
            $r = array_values($_SESSION['basket']);
            $_SESSION['basket'] = array();
            $_SESSION['basket'] = $r;
            for($j = 0; $j < count($_SESSION['basket']); $j++ ){
                if($_GET['id'] == $_SESSION['basket'][$j]['id']){
                    unset($_SESSION['basket'][$j]) ;
                    break;
                }
            }
            /*
             for($j = 0; $j < count($_SESSION['basket']); $j++ ){
            if(empty($_SESSION['basket'][$j])){
                 session_unset($_SESSION['basket'][$j]);
                array_values($_SESSION);
            }
            } */
            
                /*unset($_SESSION['basket'][$id]);
                $_SESSION['basket'][$id] = array();*/
        } 
        $basket = array_values($_SESSION['basket']);
        $basket = array_values($basket);
        $this->render('viewBasket', array('basket'=>$basket));
    }
    public function actionAddProduct() {
        if(Yii::app()->user->id){
        $model = new Products;
        $colors = Colors::model()->findAll(array('order' => 'colorName ASC'));
        $colorsArray = CHtml::listData($colors, 'id', 'colorName');
        $brands = Brands::model()->findAll(array('order' => 'brand_name ASC'));
        $brandsArray = CHtml::listData($brands, 'id', 'brand_name');
        $categories = Categories::model()->findAll(array('order' => 'category_name ASC'));
        $categoriesArray = CHtml::listData($categories, 'id', 'category_name');
        if (!empty($_POST)) {
            $model->attributes = $_POST;
            $uploadedImage = CUploadedFile::getInstance($model, 'thumb_image');
            $model->date_added =  date("Y-m-d H:i:s");
            $model->views =  0;
            $model->active =  1;
            if (is_object($uploadedImage)) {
                $rnd = rand(0,9999);  
                $fileName = "{$rnd}-{$uploadedImage}";  // random number + file name
                $model->thumb_image = $fileName;
            } else {
                $model->thumb_image = "";
            } 
            if ($model->save()) {
                 if(is_object($uploadedImage))
                {
                    $uploadedImage->saveAs(Yii::app()->basePath.'/../images/products/'. $model->thumb_image);
                }
                 $this->redirect('index.php?r=site/products');
            } else {
                $this->redirect('index.php?r=site/addProduct');
            }
        } else {
            $this->render('addProduct', array('model' => $model,'colorsArray'=>$colorsArray, 'brandsArray'=>$brandsArray, 'categoriesArray'=>$categoriesArray ));
        }
        }else $this->redirect('index.php?r=site/index&loginrequired');
    }

    public function actionUpdateProduct() {
        $model = new Products;
        $colors = Colors::model()->findAll(array('order' => 'colorName ASC'));
        $colorsArray = CHtml::listData($colors, 'id', 'colorName');
        if (!empty($_POST)) {
            if ($update = Products::model()->findByPk($_POST['id'])) {
                $rnd = rand(0,9999);  
                $attributes = $update->attributes = $_POST;
                $file=CUploadedFile::getInstance($update,'thumb_image');
                $fileName = "{$rnd}-{$file}";
                if(!empty($file))
                {
                        $update->thumb_image=CUploadedFile::getInstance($update,'thumb_image');
                }
                else
                {
                        $update->thumb_image = $update->thumb_image;
                }


                if (Products::model()->updateByPk($_POST['id'], $update->attributes)) {
                    if(!empty($file))
                    {	
                            $update->thumb_image->saveAs(Yii::app()->basePath.'/../images/products/'. $update->thumb_image);
                    }
                    $this->redirect('index.php?r=site/viewProduct&id=' . $_POST['id']);
                }
            }
        } else {
            $id = $_GET['id'];
            $productArray = Products::model()->find('id=:id', array(':id' => $id));
            $this->render('updateProduct', array('model' => $model,
                'productArray' => $productArray,'colorsArray'=>$colorsArray,
            ));
        }
    }

    public function actionViewProduct($id) {
        $model = new Products;
        $data = Products::model()->findByPk($id);
        $color = Colors::model()->findByPk($data->color);
        // select other poducts by this user
        $products = Products::model()->findAll(array("condition"=>"dealers_id=$data->dealers_id AND id != $id"));
        // update counter whenever the product is viewed
        Products::model()->updateCounters(array('views' => 1), array('condition' => "id=" . $id), array(':id' => $id));
        //Setting saving the history related to this produts
        $productHistory = new ProductsHistory;
        $userID =  rand(9000,9999); 
        if(Yii::app()->user->id){
            $userID = Yii::app()->user->id;
        }
        //echo $userID; exit;
        $users_id= $userID;
        $products_id = $id;
        $date_added =  date("Y-m-d H:i:s");
        $historyArray = array('users_id'=>$users_id, 'products_id'=>$products_id, 'date_added'=>$date_added );
        $productHistory->attributes = $historyArray;
        
        $checkProductHistory = ProductsHistory::model()->findAll(array('order' => 'id ASC'));
        $Exist = false;
        foreach($checkProductHistory as $checkProducts){
            //var_dump((int)$productHistory['products_id'] !== (int)$checkProducts['products_id']); exit;
            if( (((int)$checkProducts['products_id'] === (int)$productHistory['products_id']) AND  ((int)$checkProducts['users_id'] ===(int)$productHistory['users_id']))){
                  $Exist = true;       
            }
        }
        if(!$Exist){
            $productHistory->save(); 
        }
        //select all the users with this product
        $findProducts = ProductsHistory::model()->findAll(array("condition" => "products_id=$id"));
        //echo 'test';
       // print('<br />products_id '.' users_id<br />');
        $associatedProducts = array();
        foreach($findProducts as $productsArray){
                $findProductsAtThisDealers = ProductsHistory::model()->findAll(array("condition" => "users_id=$productsArray->users_id"));
                
                foreach($findProductsAtThisDealers as $theDealers){
                    if($theDealers->products_id != $id){
                    array_push($associatedProducts, $theDealers->products_id);
                    }
                }
        }
        $array_s = array();
        for($i = 0; $i< count($associatedProducts); $i++){
            array_push( $array_s , Products::model()->findAll(array("condition"=>"id=$associatedProducts[$i] AND active=1")));
        }
        $this->render('viewProduct', array('color'=> $color, 'data' => $data, 'products'=>$products,'array_s'=>$array_s
        ));
    }
    public function actionTopUpWallet(){
        if(!empty($_POST)){
            $this->redirect('index.php?r=site/index&topupwallet=true');
        }
        else $this->redirect('index.php?r=site/index&topupwallet=false');
    }
    public function actionQuicksale() {
        $model = new Sales;
        if (!empty($_POST)) {
            $model->attributes = $_POST;
            $model->date_time =  date("Y-m-d H:i:s"); 
            $model->ip_address = $_SERVER["REMOTE_ADDR"];
            if ($model->save()) {
                 $this->redirect('index.php?r=site/index');
            } else {
                $this->redirect('index.php?r=site/quicksale');
            }
            
        }else{
            $this->render('quicksale', array('model' => $model));
        }
    }
    
   
    public function actionDeleteProduct($id){
        //$model = new Products;
        $data = Products::model()->findByPk($id);
        if($data->updateByPk($id,array('active'=>'0'))); 
                $this->redirect(Yii::app()->request->urlReferrer);
    }
    public function actionDeactivateAccount($id){
        //$model = new Products;
        $data = Dealers::model()->findByPk($id);
        if($data->updateByPk($id,array('active'=>'0'))){
            $this->actionLogout();
        }
    }
    private function advancedSearch($searchValue, $colorValue, $yearValue, $dimentionValue, $priceValue){
        
        if((isset($searchValue) && ($searchValue != null)) && (isset($colorValue) && ($colorValue != null) ) && (isset($yearValue) && ($yearValue != null)) && (isset($dimentionValue) && ($dimentionValue != null)) && (isset($priceValue) && ($priceValue != null)) ){
            $model = Products::model()->findAll(array('condition' => 'active = "1" AND  product_name like "%' . $searchValue . '%" AND product_year="' .$yearValue. '" AND color="' .$colorValue. '" AND dimensions="' . $dimentionValue . '" AND price="' . $priceValue . '"', 'order' => 'views DESC'));
        }else if((isset($searchValue) && ($searchValue != null)) && (isset($colorValue) && ($colorValue != null) ) && (isset($yearValue) && ($yearValue != null)) && (isset($dimentionValue) && ($dimentionValue != null)) ){
            $model = Products::model()->findAll(array('condition' => 'active = "1" AND  product_name like "%' . $searchValue . '%" AND product_year="' .$yearValue. '" AND color="' .$colorValue. '" AND dimensions="' . $dimentionValue . '"', 'order' => 'views DESC'));
        }else if((isset($searchValue) && ($searchValue != null)) && (isset($colorValue) && ($colorValue != null) ) && (isset($yearValue) && ($yearValue != null)) ){
            $model = Products::model()->findAll(array('condition' => 'active = "1" AND  product_name like "%' . $searchValue . '%" AND product_year="' .$yearValue. '" AND color="' .$colorValue.'"', 'order' => 'views DESC'));
        }else if((isset($searchValue) && ($searchValue != null)) && (isset($colorValue) && ($colorValue != null) ) ){
            $model = Products::model()->findAll(array('condition' => 'active = "1" AND  product_name like "%' . $searchValue . '%" AND color="' .$colorValue.'"', 'order' => 'views DESC'));
        }else if((isset($searchValue) && ($searchValue != null)) ){
            $model = Products::model()->findAll(array('condition' => 'active = "1" AND  product_name like "%' . $searchValue . '%"', 'order' => 'views DESC'));
        }/*else{
            $model = Products::model()->findAll();
        }*/
        return $model;
    }
    public function actionDealerRatings(){
        //print_r($_POST);
        $model = new DealerRatings;
        if (!empty($_POST)) {
            $model->attributes = $_POST;
            $model->date_added =  date("Y-m-d H:i:s");
            $model->rating = $_POST['star'];
            if ($model->save()) {
                 $this->redirect(Yii::app()->request->urlReferrer);
            } 
        } else {
            $this->redirect(Yii::app()->request->urlReferrer);
        }
    }
    
    public function actionSearch() {
        $data = new Products;
        $colors = Colors::model()->findAll(array('order' => 'colorName ASC'));
        $colorsArray = CHtml::listData($colors, 'id', 'colorName');
        $resultString = $_POST['search_keyword'];
        /*if (isset($_POST['advanced-search'])) {
            $heading = "Search Results";
            $search = $_POST['advanced_search_keyword'];
            $color = $_POST['color'];
            $year =$_POST['product_year'];
            $dimension = $_POST['dimensions'];
            $price = $_POST['price'];
            $model = $this->advancedSearch($search ,$color ,$year ,$dimension , $price);
             if(empty($model)) {
                    $resultString = '" ' . $_POST['advanced_search_keyword'] . '" Could not be found in our database. Try advanced search below';   
                }
                 $this->render('search', array('colorsArray'=>$colorsArray , 'model' => $model, 'data' => $data, 'heading' => $heading, 'resultString' => $resultString,
                ));
        }
        else */ if ((isset($_POST['search_keyword']) && $_POST['search_keyword'] != null)  ) {
            $heading = "Search Results";
            $model = Products::model()->findAll(array('condition' => 'active = "1" AND  product_name like "%'. $_POST['search_keyword'].'%" OR description="' . $_POST['search_keyword'] . '" OR product_year="' . $_POST['search_keyword'].'"', 'order' => 'views DESC'));
            if(empty($model)){
               $resultString =$_POST['search_keyword'];
            }
            $this->render('search', array( 'count_dealers'=>$count_dealers, 'colorsArray'=>$colorsArray ,'model' => $model,'data' => $data,'heading'=>$heading,'resultString'=>$resultString,
            ));
        }else if((isset($_GET['searchkeyword']) && $_GET['sort'] != null)){
            $resultString =$_GET['searchkeyword'];
            $model = Products::model()->findAll(array('condition' => 'active = "1" AND  product_name like "%'. $_GET['searchkeyword'].'%" OR description="' . $_GET['searchkeyword'] . '" OR product_year="' . $_GET['searchkeyword'].'"', 'order' => 'views DESC', "order" => $_GET['sort']." ASC " ));
        }
        $this->render('search', array( 'count_dealers'=>$count_dealers, 'colorsArray'=>$colorsArray ,'model' => $model,'data' => $data,'heading'=>$heading,'resultString'=>$resultString,
            ));
    }
    
     public function actionViewBasket() {
        //$model = new Basket;
        //session_start();
         //unset(Yii::app()->session['basket']);
        
         $basket = Yii::app()->session['basket'];
         
         for($i = 0; $i < count($basket); $i++){
             if(empty($basket[$i])){
                 unset($basket[$i]);
             }
         }
         if(!empty($basket)){
            $basket = array_values($basket);
         }
         /*print('<pre>');
         print_r($basket);print('</pre>'); exit;*/
         $data = Products::model()->findByPk(14);
         $this->render('viewBasket', array('data'=>$data, 'basket'=>$basket));
    }

    public function actionViewWishlist() {
        $this->render('viewWishlist');
    }
    
    public function actionRemoveWishlistProduct($id) {
        $data = WishList::model()->findByPk($id);
        $data->delete();
	$this->redirect(Yii::app()->request->urlReferrer);
        //$this->render('viewWishlist');
    }
    

    /**
     * Logs out the current user and redirect to homepage.
     */
    public function actionLogout() {
        Yii::app()->user->logout();
        $_SESSION['basket'] = array();
        $this->redirect(Yii::app()->homeUrl);
    }

}